CREATE WAREHOUSE COVID_WAREHOUSE WITH WAREHOUSE_SIZE = 'XLARGE' WAREHOUSE_TYPE = 'STANDARD' AUTO_SUSPEND = 600 AUTO_RESUME = TRUE;
CREATE DATABASE COVID_DATABASE;

USE COVID_DATABASE;

/*
This table is created using python library csvkit in anaconda prompt
pip install csvkit
csvsql --dialect mysql --snifflimit 102000 deaths.csv > output_deaths.sql
csvsql --dialect mysql --snifflimit 102000 vaccination.csv > output_vaccination.sql
*/

CREATE or REPLACE TABLE deaths (
	iso_code VARCHAR(8) NOT NULL, 
	continent VARCHAR(13), 
	location VARCHAR(32) NOT NULL, 
	date DATE NOT NULL, 
	population DECIMAL(38, 0), 
	total_cases DECIMAL(38, 0), 
	new_cases DECIMAL(38, 0), 
	new_cases_smoothed DECIMAL(38, 3), 
	total_deaths DECIMAL(38, 0), 
	new_deaths DECIMAL(38, 0), 
	new_deaths_smoothed DECIMAL(38, 3), 
	total_cases_per_million DECIMAL(38, 3), 
	new_cases_per_million DECIMAL(38, 3), 
	new_cases_smoothed_per_million DECIMAL(38, 3), 
	total_deaths_per_million DECIMAL(38, 3), 
	new_deaths_per_million DECIMAL(38, 3), 
	new_deaths_smoothed_per_million DECIMAL(38, 3), 
	reproduction_rate DECIMAL(38, 2), 
	icu_patients DECIMAL(38, 0), 
	icu_patients_per_million DECIMAL(38, 3), 
	hosp_patients DECIMAL(38, 0), 
	hosp_patients_per_million DECIMAL(38, 3), 
	weekly_icu_admissions DECIMAL(38, 3), 
	weekly_icu_admissions_per_million DECIMAL(38, 3), 
	weekly_hosp_admissions DECIMAL(38, 3), 
	weekly_hosp_admissions_per_million DECIMAL(38, 3)
);

select * from deaths;

CREATE TABLE vaccination (
	iso_code VARCHAR(8) NOT NULL, 
	continent VARCHAR(13), 
	location VARCHAR(32) NOT NULL, 
	date DATE NOT NULL, 
	new_tests DECIMAL(38, 0), 
	total_tests DECIMAL(38, 0), 
	total_tests_per_thousand DECIMAL(38, 3), 
	new_tests_per_thousand DECIMAL(38, 3), 
	new_tests_smoothed DECIMAL(38, 0), 
	new_tests_smoothed_per_thousand DECIMAL(38, 3), 
	positive_rate DECIMAL(38, 3), 
	tests_per_case DECIMAL(38, 1), 
	tests_units VARCHAR(15), 
	total_vaccinations DECIMAL(38, 0), 
	people_vaccinated DECIMAL(38, 0), 
	people_fully_vaccinated DECIMAL(38, 0), 
	new_vaccinations DECIMAL(38, 0), 
	new_vaccinations_smoothed DECIMAL(38, 0), 
	total_vaccinations_per_hundred DECIMAL(38, 2), 
	people_vaccinated_per_hundred DECIMAL(38, 2), 
	people_fully_vaccinated_per_hundred DECIMAL(38, 2), 
	new_vaccinations_smoothed_per_million DECIMAL(38, 0), 
	stringency_index DECIMAL(38, 2), 
	population_density DECIMAL(38, 3), 
	median_age DECIMAL(38, 1), 
	aged_65_older DECIMAL(38, 3), 
	aged_70_older DECIMAL(38, 3), 
	gdp_per_capita DECIMAL(38, 3), 
	extreme_poverty DECIMAL(38, 1), 
	cardiovasc_death_rate DECIMAL(38, 3), 
	diabetes_prevalence DECIMAL(38, 2), 
	female_smokers DECIMAL(38, 3), 
	male_smokers DECIMAL(38, 3), 
	handwashing_facilities DECIMAL(38, 3), 
	hospital_beds_per_thousand DECIMAL(38, 3), 
	life_expectancy DECIMAL(38, 2), 
	human_development_index DECIMAL(38, 3), 
	excess_mortality DECIMAL(38, 2)
);

select * from vaccination;

-- AFTER CREATING THE TABLES, DATA IS LOADED IN SNOWFLAKE

-------------------------------------DATA EXPLORATION---------------------------------------------------------------------

SELECT * FROM DEATHS
ORDER BY 3,4;

SELECT 
    LOCATION, DATE, POPULATION, TOTAL_CASES, TOTAL_DEATHS
FROM DEATHS
ORDER BY 1,2;

-- TOTAL CASES VS TOTAL DEATHS BY COUNTRY

SELECT LOCATION, COUNT(TOTAL_CASES) AS TOTAL_CASES, COUNT(TOTAL_DEATHS) AS TOTAL_DEATHS
FROM DEATHS
GROUP BY LOCATION
ORDER BY 1;

-- DEATH PERCENTAGE
SELECT 
    LOCATION, DATE, POPULATION, TOTAL_CASES, TOTAL_DEATHS, (TOTAL_DEATHS/TOTAL_CASES)*100 AS DEATH_PERCENTAGE
FROM DEATHS
ORDER BY 1,2;

-- DEATH PERCENTAGE IN INDIA
SELECT 
    LOCATION, DATE, POPULATION, TOTAL_CASES, TOTAL_DEATHS, (TOTAL_DEATHS/TOTAL_CASES)*100 AS DEATH_PERCENTAGE
FROM DEATHS
WHERE LOCATION LIKE '%India%'
order by 2;

-- TOTAL CASES vs POPULATION
SELECT 
    LOCATION, DATE, POPULATION, TOTAL_CASES, (TOTAL_CASES/POPULATION)*100 AS TOTAL_CASES_PERCENTAGE
FROM DEATHS
ORDER BY 1,2;

-- PERCENTAGE OF POPULATION INFECTED COVID IN INDIA
SELECT 
    LOCATION, DATE, POPULATION, TOTAL_CASES, (TOTAL_CASES/POPULATION)*100 AS INFECTION_RATE
FROM DEATHS
WHERE LOCATION LIKE '%India%'
ORDER BY 1,2;

--COUNTRIES WITH Highest infection rate
SELECT 
    LOCATION, POPULATION, MAX(TOTAL_CASES) AS HIGHEST_INFECTION_COUNT, MAX((TOTAL_CASES/POPULATION))*100 AS INFECTION_RATE
FROM DEATHS
WHERE CONTINENT IS NOT NULL
GROUP BY 1,2
HAVING INFECTION_RATE IS NOT NULL
ORDER BY INFECTION_RATE DESC
LIMIT 5;

-- COUNTRIES WITH HIGHEST DEATH COUNT PER POPULAION
SELECT LOCATION, MAX(TOTAL_DEATHS) AS TOTAL_DEATH_COUNT
FROM DEATHS
WHERE CONTINENT IS NOT NULL
GROUP BY 1
HAVING TOTAL_DEATH_COUNT IS NOT NULL
ORDER BY 2 DESC;

-- CONTINENTS WISE DEATH COUNT
SELECT CONTINENT, MAX(TOTAL_DEATHS) AS TOTAL_DEATH_COUNT
FROM DEATHS
WHERE CONTINENT IS NOT NULL
GROUP BY 1
HAVING TOTAL_DEATH_COUNT IS NOT NULL
ORDER BY 2 DESC;

-- GLOBAL NUMBERS
-- OVERALL CASES AND DEATHS BY DAY
SELECT DATE, SUM(NEW_CASES) AS TOTAL_CASES, SUM(NEW_DEATHS) AS TOTAL_DEATHS, SUM(NEW_DEATHS)/SUM(NEW_CASES)*100 AS DEATH_PERCENTAGE
FROM DEATHS
WHERE CONTINENT IS NOT NULL
GROUP BY DATE
HAVING DEATH_PERCENTAGE IS NOT NULL
ORDER BY 1,2;

-- OVERALL CASES AND DEATHS
SELECT SUM(NEW_CASES) AS TOTAL_CASES, SUM(NEW_DEATHS) AS TOTAL_DEATHS, SUM(NEW_DEATHS)/SUM(NEW_CASES)*100 AS DEATH_PERCENTAGE
FROM DEATHS
WHERE CONTINENT IS NOT NULL
-- GROUP BY DATE
HAVING DEATH_PERCENTAGE IS NOT NULL
ORDER BY 1,2;

-- TOTAL POPULATION VS VACCINATIONS
SELECT 
    DE.CONTINENT, DE.LOCATION, DE.DATE, DE.POPULATION, VA.NEW_VACCINATIONS, SUM(VA.NEW_VACCINATIONS) OVER (PARTITION BY DE.LOCATION ORDER BY DE.LOCATION, DE.DATE) AS VACCINES_PRESENT
FROM DEATHS DE
JOIN VACCINATION VA ON 
DE.LOCATION = VA.LOCATION 
AND DE.DATE = VA.DATE
ORDER BY 2,3;

-- 
WITH POPvsVAC
AS(
SELECT 
    DE.CONTINENT, DE.LOCATION, DE.DATE, DE.POPULATION, VA.NEW_VACCINATIONS, SUM(VA.NEW_VACCINATIONS) OVER (PARTITION BY DE.LOCATION ORDER BY DE.LOCATION, DE.DATE) AS VACCINES_PRESENT
FROM DEATHS DE
JOIN VACCINATION VA ON 
DE.LOCATION = VA.LOCATION 
AND DE.DATE = VA.DATE
--ORDER BY 2,3
) 
SELECT *, (VACCINES_PRESENT/POPULATION)*100 AS PERCENTAGE_VACCINES_PRESENT
FROM POPvsVAC;

-- USING TEMP TABLE
DROP TABLE PercentageVaccinationsPresent;
Create OR REPLACE Table PercentageVaccinationsPresent
(
Continent nvarchar(255),
Location nvarchar(255),
Date datetime,
Population numeric,
New_vaccinations numeric,
VACCINE_PRESENT numeric
);
DESCRIBE TABLE PercentageVaccinationsPresent;

INSERT INTO PercentageVaccinationsPresent
SELECT 
    DE.CONTINENT, DE.LOCATION, DE.DATE, DE.POPULATION, VA.NEW_VACCINATIONS, SUM(VA.NEW_VACCINATIONS) OVER (PARTITION BY DE.LOCATION ORDER BY DE.LOCATION, DE.DATE) AS VACCINES_PRESENT
FROM DEATHS DE
JOIN VACCINATION VA ON 
DE.LOCATION = VA.LOCATION 
AND DE.DATE = VA.DATE
--ORDER BY 2,3
;

SELECT *, (VACCINE_PRESENT/POPULATION)*100 AS PERCENTAGE_VACCINES_PRESENT
FROM PercentageVaccinationsPresent;

